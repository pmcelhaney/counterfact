// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`end-to-end test generates the same code for pet store that it did on the last test run 1`] = `
Map {
  "paths/pet.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1pet/post@[object Object]:false" => "POST",
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet/post@path-types/pet.types.ts:true:false" => "HTTP_POST",
      "OperationCoder@./petstore.yaml#/paths/~1pet/put@[object Object]:false" => "PUT",
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet/put@path-types/pet.types.ts:true:false" => "HTTP_PUT",
    },
    "exports": Map {
      "POST" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1pet/post",
        "isDefault": false,
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
      "PUT" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1pet/put",
        "isDefault": false,
        "isType": false,
        "name": "PUT",
        "promise": Promise {},
        "typeDeclaration": "HTTP_PUT",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_POST" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet/put@[object Object]:true" => "HTTP_PUT",
            "ContextTypeCoder@paths/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
          },
          "exports": Map {
            "HTTP_POST" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: Pet, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Pet
         },
"application/json": { 
            schema:  Pet
         }
};
        },
405: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Pet
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Pet
            } | {  
          status: 405 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: Pet, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Pet
         },
"application/json": { 
            schema:  Pet
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        },
405: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Pet
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Pet
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | {  
          status: 405 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet/put",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "Context" => {
                    "beforeExport": "/**
* This is the default context for Counterfact.
* Change the code to suit your needs.
*/
class Context {
  // delete this line to make the class type safe
  [key: string]: any; 

  // A helper when you accessing the context object via the REPL. You can delete it if you like.
  [Symbol.for('nodejs.util.inspect.custom')](depth, options, inspect) {
    return inspect(this, { ...options, customInspect: false }) + "\\n\\n ^ This is the default context object. You can edit its definition at paths/$.context.ts";
  }
}
",
                    "code": "new Context()",
                    "done": true,
                    "id": "ContextCoder",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "ContextType" => {
                    "beforeExport": "",
                    "code": "Context",
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name": string,"category"?: Category,"photoUrls": Array<string>,"tags"?: Array<Tag>,"status"?: "available" | "pending" | "sold"}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {
                  "Category" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_PUT" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_PUT",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet/put@[object Object]:true" => "HTTP_PUT",
            "ContextTypeCoder@paths/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
          },
          "exports": Map {
            "HTTP_POST" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: Pet, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Pet
         },
"application/json": { 
            schema:  Pet
         }
};
        },
405: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Pet
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Pet
            } | {  
          status: 405 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: Pet, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Pet
         },
"application/json": { 
            schema:  Pet
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        },
405: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Pet
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Pet
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | {  
          status: 405 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet/put",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "Context" => {
                    "beforeExport": "/**
* This is the default context for Counterfact.
* Change the code to suit your needs.
*/
class Context {
  // delete this line to make the class type safe
  [key: string]: any; 

  // A helper when you accessing the context object via the REPL. You can delete it if you like.
  [Symbol.for('nodejs.util.inspect.custom')](depth, options, inspect) {
    return inspect(this, { ...options, customInspect: false }) + "\\n\\n ^ This is the default context object. You can edit its definition at paths/$.context.ts";
  }
}
",
                    "code": "new Context()",
                    "done": true,
                    "id": "ContextCoder",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "ContextType" => {
                    "beforeExport": "",
                    "code": "Context",
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name": string,"category"?: Category,"photoUrls": Array<string>,"tags"?: Array<Tag>,"status"?: "available" | "pending" | "sold"}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {
                  "Category" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet/post@[object Object]:true" => "HTTP_POST",
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet/put@[object Object]:true" => "HTTP_PUT",
      "ContextTypeCoder@paths/$.context.ts:true:false" => "ContextType",
      "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
    },
    "exports": Map {
      "HTTP_POST" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: Pet, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Pet
         },
"application/json": { 
            schema:  Pet
         }
};
        },
405: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Pet
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Pet
            } | {  
          status: 405 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet/post",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_PUT" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: Pet, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Pet
         },
"application/json": { 
            schema:  Pet
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        },
405: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Pet
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Pet
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | {  
          status: 405 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet/put",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_PUT",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "default" => "Context",
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "Context" => {
              "beforeExport": "/**
* This is the default context for Counterfact.
* Change the code to suit your needs.
*/
class Context {
  // delete this line to make the class type safe
  [key: string]: any; 

  // A helper when you accessing the context object via the REPL. You can delete it if you like.
  [Symbol.for('nodejs.util.inspect.custom')](depth, options, inspect) {
    return inspect(this, { ...options, customInspect: false }) + "\\n\\n ^ This is the default context object. You can edit its definition at paths/$.context.ts";
  }
}
",
              "code": "new Context()",
              "done": true,
              "id": "ContextCoder",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "ContextType" => {
              "beforeExport": "",
              "code": "Context",
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => {
        "isDefault": false,
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
          },
          "exports": Map {
            "Pet" => {
              "beforeExport": "",
              "code": "{"id"?: number,"name": string,"category"?: Category,"photoUrls": Array<string>,"tags"?: Array<Tag>,"status"?: "available" | "pending" | "sold"}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {
            "Category" => {
              "isDefault": false,
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                },
                "exports": Map {
                  "Category" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name"?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => {
              "isDefault": false,
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                },
                "exports": Map {
                  "Tag" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name"?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/findByStatus.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1pet~1findByStatus/get@[object Object]:false" => "GET",
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1findByStatus/get@path-types/pet/findByStatus.types.ts:true:false" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1pet~1findByStatus/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_GET" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1findByStatus/get@[object Object]:true" => "HTTP_GET",
            "ContextTypeCoder@paths/pet/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: {"status?": "available" | "pending" | "sold"}, path: never, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Array<Pet>
         },
"application/json": { 
            schema:  Array<Pet>
         }
};
        },
400: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Array<Pet>
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Array<Pet>
            } | {  
          status: 400 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1findByStatus/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/pet/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name": string,"category"?: Category,"photoUrls": Array<string>,"tags"?: Array<Tag>,"status"?: "available" | "pending" | "sold"}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {
                  "Category" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/findByStatus.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet/findByStatus.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet/findByStatus.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1findByStatus/get@[object Object]:true" => "HTTP_GET",
      "ContextTypeCoder@paths/pet/$.context.ts:true:false" => "ContextType",
      "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
    },
    "exports": Map {
      "HTTP_GET" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: {"status?": "available" | "pending" | "sold"}, path: never, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Array<Pet>
         },
"application/json": { 
            schema:  Array<Pet>
         }
};
        },
400: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Array<Pet>
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Array<Pet>
            } | {  
          status: 400 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1findByStatus/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "ContextType" => {
              "beforeExport": "",
              "code": {
                "raw": "export type { ContextType } from "../$.context"",
              },
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/pet/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => {
        "isDefault": false,
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
          },
          "exports": Map {
            "Pet" => {
              "beforeExport": "",
              "code": "{"id"?: number,"name": string,"category"?: Category,"photoUrls": Array<string>,"tags"?: Array<Tag>,"status"?: "available" | "pending" | "sold"}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {
            "Category" => {
              "isDefault": false,
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                },
                "exports": Map {
                  "Category" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name"?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => {
              "isDefault": false,
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                },
                "exports": Map {
                  "Tag" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name"?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet/findByStatus.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/findByTags.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1pet~1findByTags/get@[object Object]:false" => "GET",
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1findByTags/get@path-types/pet/findByTags.types.ts:true:false" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1pet~1findByTags/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_GET" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1findByTags/get@[object Object]:true" => "HTTP_GET",
            "ContextTypeCoder@paths/pet/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: {"tags?": Array<string>}, path: never, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Array<Pet>
         },
"application/json": { 
            schema:  Array<Pet>
         }
};
        },
400: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Array<Pet>
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Array<Pet>
            } | {  
          status: 400 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1findByTags/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/pet/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name": string,"category"?: Category,"photoUrls": Array<string>,"tags"?: Array<Tag>,"status"?: "available" | "pending" | "sold"}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {
                  "Category" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/findByTags.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet/findByTags.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet/findByTags.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1findByTags/get@[object Object]:true" => "HTTP_GET",
      "ContextTypeCoder@paths/pet/$.context.ts:true:false" => "ContextType",
      "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
    },
    "exports": Map {
      "HTTP_GET" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: {"tags?": Array<string>}, path: never, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Array<Pet>
         },
"application/json": { 
            schema:  Array<Pet>
         }
};
        },
400: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Array<Pet>
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Array<Pet>
            } | {  
          status: 400 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1findByTags/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "ContextType" => {
              "beforeExport": "",
              "code": {
                "raw": "export type { ContextType } from "../$.context"",
              },
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/pet/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => {
        "isDefault": false,
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
          },
          "exports": Map {
            "Pet" => {
              "beforeExport": "",
              "code": "{"id"?: number,"name": string,"category"?: Category,"photoUrls": Array<string>,"tags"?: Array<Tag>,"status"?: "available" | "pending" | "sold"}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {
            "Category" => {
              "isDefault": false,
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                },
                "exports": Map {
                  "Category" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name"?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => {
              "isDefault": false,
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                },
                "exports": Map {
                  "Tag" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name"?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet/findByTags.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/{petId}.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:false" => "GET",
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/get@path-types/pet/{petId}.types.ts:true:false" => "HTTP_GET",
      "OperationCoder@./petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:false" => "POST",
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/post@path-types/pet/{petId}.types.ts:true:false" => "HTTP_POST",
      "OperationCoder@./petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:false" => "DELETE",
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/delete@path-types/pet/{petId}.types.ts:true:false" => "HTTP_DELETE",
    },
    "exports": Map {
      "GET" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1pet~1{petId}/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
      "POST" => {
        "beforeExport": "",
        "code": "() => { /* no response content specified in the OpenAPI document */ }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1pet~1{petId}/post",
        "isDefault": false,
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
      "DELETE" => {
        "beforeExport": "",
        "code": "() => { /* no response content specified in the OpenAPI document */ }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1pet~1{petId}/delete",
        "isDefault": false,
        "isType": false,
        "name": "DELETE",
        "promise": Promise {},
        "typeDeclaration": "HTTP_DELETE",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_GET" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextTypeCoder@paths/pet/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"petId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Pet
         },
"application/json": { 
            schema:  Pet
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Pet
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Pet
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_POST" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: {"name?": number, "status?": string}, path: {"petId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
405: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 405 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"petId": string}, header: {"api_key?": string}, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
400: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 400 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/pet/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name": string,"category"?: Category,"photoUrls": Array<string>,"tags"?: Array<Tag>,"status"?: "available" | "pending" | "sold"}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {
                  "Category" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/{petId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_POST" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextTypeCoder@paths/pet/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"petId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Pet
         },
"application/json": { 
            schema:  Pet
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Pet
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Pet
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_POST" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: {"name?": number, "status?": string}, path: {"petId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
405: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 405 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"petId": string}, header: {"api_key?": string}, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
400: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 400 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/pet/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name": string,"category"?: Category,"photoUrls": Array<string>,"tags"?: Array<Tag>,"status"?: "available" | "pending" | "sold"}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {
                  "Category" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/{petId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_DELETE" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_DELETE",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextTypeCoder@paths/pet/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"petId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Pet
         },
"application/json": { 
            schema:  Pet
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Pet
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Pet
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_POST" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: {"name?": number, "status?": string}, path: {"petId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
405: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 405 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"petId": string}, header: {"api_key?": string}, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
400: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 400 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/pet/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name": string,"category"?: Category,"photoUrls": Array<string>,"tags"?: Array<Tag>,"status"?: "available" | "pending" | "sold"}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {
                  "Category" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => {
                          "beforeExport": "",
                          "code": "{"id"?: number,"name"?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImport": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/{petId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet/{petId}.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet/{petId}.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:true" => "HTTP_GET",
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:true" => "HTTP_POST",
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:true" => "HTTP_DELETE",
      "ContextTypeCoder@paths/pet/$.context.ts:true:false" => "ContextType",
      "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
    },
    "exports": Map {
      "HTTP_GET" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"petId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Pet
         },
"application/json": { 
            schema:  Pet
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Pet
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Pet
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_POST" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: {"name?": number, "status?": string}, path: {"petId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
405: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 405 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/post",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_DELETE" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"petId": string}, header: {"api_key?": string}, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
400: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 400 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}/delete",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_DELETE",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "ContextType" => {
              "beforeExport": "",
              "code": {
                "raw": "export type { ContextType } from "../$.context"",
              },
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/pet/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => {
        "isDefault": false,
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
          },
          "exports": Map {
            "Pet" => {
              "beforeExport": "",
              "code": "{"id"?: number,"name": string,"category"?: Category,"photoUrls": Array<string>,"tags"?: Array<Tag>,"status"?: "available" | "pending" | "sold"}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {
            "Category" => {
              "isDefault": false,
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                },
                "exports": Map {
                  "Category" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name"?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => {
              "isDefault": false,
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                },
                "exports": Map {
                  "Tag" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"name"?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet/{petId}.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/{petId}/uploadImage.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@[object Object]:false" => "POST",
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@path-types/pet/{petId}/uploadImage.types.ts:true:false" => "HTTP_POST",
    },
    "exports": Map {
      "POST" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post",
        "isDefault": false,
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_POST" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@[object Object]:true" => "HTTP_POST",
            "ContextTypeCoder@paths/pet/{petId}/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/ApiResponse.ts:true:false" => "ApiResponse",
          },
          "exports": Map {
            "HTTP_POST" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: {"additionalMetadata?": number}, path: {"petId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/json": { 
            schema:  ApiResponse
         }
};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/json",
              body?: ApiResponse
            } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/pet/{petId}/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "ApiResponse" => {
              "isDefault": false,
              "isType": true,
              "name": "ApiResponse",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "ApiResponse",
                },
                "exports": Map {
                  "ApiResponse" => {
                    "beforeExport": "",
                    "code": "{"code"?: number,"type"?: string,"message"?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "ApiResponse",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/ApiResponse.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/{petId}/uploadImage.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet/{petId}/uploadImage.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet/{petId}/uploadImage.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@[object Object]:true" => "HTTP_POST",
      "ContextTypeCoder@paths/pet/{petId}/$.context.ts:true:false" => "ContextType",
      "SchemaTypeCoder@undefined@components/ApiResponse.ts:true:false" => "ApiResponse",
    },
    "exports": Map {
      "HTTP_POST" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: {"additionalMetadata?": number}, path: {"petId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/json": { 
            schema:  ApiResponse
         }
};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/json",
              body?: ApiResponse
            } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../../../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "ContextType" => {
              "beforeExport": "",
              "code": {
                "raw": "export type { ContextType } from "../$.context"",
              },
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/pet/{petId}/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "ApiResponse" => {
        "isDefault": false,
        "isType": true,
        "name": "ApiResponse",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "ApiResponse",
          },
          "exports": Map {
            "ApiResponse" => {
              "beforeExport": "",
              "code": "{"code"?: number,"type"?: string,"message"?: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "ApiResponse",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "components/ApiResponse.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet/{petId}/uploadImage.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/inventory.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1store~1inventory/get@[object Object]:false" => "GET",
      "OperationTypeCoder@./petstore.yaml#/paths/~1store~1inventory/get@path-types/store/inventory.types.ts:true:false" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1store~1inventory/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_GET" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1store~1inventory/get@[object Object]:true" => "HTTP_GET",
            "ContextTypeCoder@paths/store/$.context.ts:true:false" => "ContextType",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/json": { 
            schema:  {[key: string]: number}
         }
};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/json",
              body?: {[key: string]: number}
            } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1store~1inventory/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/store/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/store/inventory.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/store/inventory.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/store/inventory.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1store~1inventory/get@[object Object]:true" => "HTTP_GET",
      "ContextTypeCoder@paths/store/$.context.ts:true:false" => "ContextType",
    },
    "exports": Map {
      "HTTP_GET" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/json": { 
            schema:  {[key: string]: number}
         }
};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/json",
              body?: {[key: string]: number}
            } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1store~1inventory/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "ContextType" => {
              "beforeExport": "",
              "code": {
                "raw": "export type { ContextType } from "../$.context"",
              },
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/store/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/store/inventory.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/order.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1store~1order/post@[object Object]:false" => "POST",
      "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order/post@path-types/store/order.types.ts:true:false" => "HTTP_POST",
    },
    "exports": Map {
      "POST" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1store~1order/post",
        "isDefault": false,
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_POST" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order/post@[object Object]:true" => "HTTP_POST",
            "ContextTypeCoder@paths/store/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/Order.ts:true:false" => "Order",
          },
          "exports": Map {
            "HTTP_POST" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: Order, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/json": { 
            schema:  Order
         }
};
        },
405: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/json",
              body?: Order
            } | {  
          status: 405 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/store/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Order" => {
              "isDefault": false,
              "isType": true,
              "name": "Order",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
                },
                "exports": Map {
                  "Order" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"petId"?: number,"quantity"?: number,"shipDate"?: string,"status"?: "placed" | "approved" | "delivered","complete"?: boolean}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Order",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/Order.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/store/order.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/store/order.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/store/order.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order/post@[object Object]:true" => "HTTP_POST",
      "ContextTypeCoder@paths/store/$.context.ts:true:false" => "ContextType",
      "SchemaTypeCoder@undefined@components/Order.ts:true:false" => "Order",
    },
    "exports": Map {
      "HTTP_POST" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: Order, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/json": { 
            schema:  Order
         }
};
        },
405: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/json",
              body?: Order
            } | {  
          status: 405 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order/post",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "ContextType" => {
              "beforeExport": "",
              "code": {
                "raw": "export type { ContextType } from "../$.context"",
              },
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/store/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Order" => {
        "isDefault": false,
        "isType": true,
        "name": "Order",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
          },
          "exports": Map {
            "Order" => {
              "beforeExport": "",
              "code": "{"id"?: number,"petId"?: number,"quantity"?: number,"shipDate"?: string,"status"?: "placed" | "approved" | "delivered","complete"?: boolean}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Order",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "components/Order.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/store/order.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/order/{orderId}.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/get@[object Object]:false" => "GET",
      "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/get@path-types/store/order/{orderId}.types.ts:true:false" => "HTTP_GET",
      "OperationCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/delete@[object Object]:false" => "DELETE",
      "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/delete@path-types/store/order/{orderId}.types.ts:true:false" => "HTTP_DELETE",
    },
    "exports": Map {
      "GET" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
      "DELETE" => {
        "beforeExport": "",
        "code": "() => { /* no response content specified in the OpenAPI document */ }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/delete",
        "isDefault": false,
        "isType": false,
        "name": "DELETE",
        "promise": Promise {},
        "typeDeclaration": "HTTP_DELETE",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_GET" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextTypeCoder@paths/store/order/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/Order.ts:true:false" => "Order",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"orderId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Order
         },
"application/json": { 
            schema:  Order
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Order
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Order
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"orderId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/store/order/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Order" => {
              "isDefault": false,
              "isType": true,
              "name": "Order",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
                },
                "exports": Map {
                  "Order" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"petId"?: number,"quantity"?: number,"shipDate"?: string,"status"?: "placed" | "approved" | "delivered","complete"?: boolean}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Order",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/Order.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/store/order/{orderId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_DELETE" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_DELETE",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextTypeCoder@paths/store/order/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/Order.ts:true:false" => "Order",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"orderId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Order
         },
"application/json": { 
            schema:  Order
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Order
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Order
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"orderId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/store/order/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Order" => {
              "isDefault": false,
              "isType": true,
              "name": "Order",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
                },
                "exports": Map {
                  "Order" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"petId"?: number,"quantity"?: number,"shipDate"?: string,"status"?: "placed" | "approved" | "delivered","complete"?: boolean}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Order",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/Order.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/store/order/{orderId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/store/order/{orderId}.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/store/order/{orderId}.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/get@[object Object]:true" => "HTTP_GET",
      "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/delete@[object Object]:true" => "HTTP_DELETE",
      "ContextTypeCoder@paths/store/order/$.context.ts:true:false" => "ContextType",
      "SchemaTypeCoder@undefined@components/Order.ts:true:false" => "Order",
    },
    "exports": Map {
      "HTTP_GET" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"orderId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  Order
         },
"application/json": { 
            schema:  Order
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: Order
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: Order
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_DELETE" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"orderId": number}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1store~1order~1{orderId}/delete",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_DELETE",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../../../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "ContextType" => {
              "beforeExport": "",
              "code": {
                "raw": "export type { ContextType } from "../$.context"",
              },
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/store/order/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Order" => {
        "isDefault": false,
        "isType": true,
        "name": "Order",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
          },
          "exports": Map {
            "Order" => {
              "beforeExport": "",
              "code": "{"id"?: number,"petId"?: number,"quantity"?: number,"shipDate"?: string,"status"?: "placed" | "approved" | "delivered","complete"?: boolean}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Order",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "components/Order.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/store/order/{orderId}.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1user/post@[object Object]:false" => "POST",
      "OperationTypeCoder@./petstore.yaml#/paths/~1user/post@path-types/user.types.ts:true:false" => "HTTP_POST",
    },
    "exports": Map {
      "POST" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1user/post",
        "isDefault": false,
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_POST" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1user/post@[object Object]:true" => "HTTP_POST",
            "ContextTypeCoder@paths/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
          },
          "exports": Map {
            "HTTP_POST" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: User, context: ContextType, response: ResponseBuilderFactory<{
[statusCode in HttpStatusCode]: {
          headers: {};
          content: {
"application/json": { 
            schema:  User
         },
"application/xml": { 
            schema:  User
         }
};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: number | undefined, 
              contentType?: "application/json",
              body?: User
            } | {  
              status: number | undefined, 
              contentType?: "application/xml",
              body?: User
            } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../types.d.ts",
            },
            "HttpStatusCode" => {
              "isType": true,
              "modulePath": "../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "Context" => {
                    "beforeExport": "/**
* This is the default context for Counterfact.
* Change the code to suit your needs.
*/
class Context {
  // delete this line to make the class type safe
  [key: string]: any; 

  // A helper when you accessing the context object via the REPL. You can delete it if you like.
  [Symbol.for('nodejs.util.inspect.custom')](depth, options, inspect) {
    return inspect(this, { ...options, customInspect: false }) + "\\n\\n ^ This is the default context object. You can edit its definition at paths/$.context.ts";
  }
}
",
                    "code": "new Context()",
                    "done": true,
                    "id": "ContextCoder",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "ContextType" => {
                    "beforeExport": "",
                    "code": "Context",
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => {
              "isDefault": false,
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                },
                "exports": Map {
                  "User" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"username"?: string,"firstName"?: string,"lastName"?: string,"email"?: string,"password"?: string,"phone"?: string,"userStatus"?: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1user/post@[object Object]:true" => "HTTP_POST",
      "ContextTypeCoder@paths/$.context.ts:true:false" => "ContextType",
      "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
    },
    "exports": Map {
      "HTTP_POST" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: User, context: ContextType, response: ResponseBuilderFactory<{
[statusCode in HttpStatusCode]: {
          headers: {};
          content: {
"application/json": { 
            schema:  User
         },
"application/xml": { 
            schema:  User
         }
};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: number | undefined, 
              contentType?: "application/json",
              body?: User
            } | {  
              status: number | undefined, 
              contentType?: "application/xml",
              body?: User
            } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user/post",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../types.d.ts",
      },
      "HttpStatusCode" => {
        "isType": true,
        "modulePath": "../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "default" => "Context",
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "Context" => {
              "beforeExport": "/**
* This is the default context for Counterfact.
* Change the code to suit your needs.
*/
class Context {
  // delete this line to make the class type safe
  [key: string]: any; 

  // A helper when you accessing the context object via the REPL. You can delete it if you like.
  [Symbol.for('nodejs.util.inspect.custom')](depth, options, inspect) {
    return inspect(this, { ...options, customInspect: false }) + "\\n\\n ^ This is the default context object. You can edit its definition at paths/$.context.ts";
  }
}
",
              "code": "new Context()",
              "done": true,
              "id": "ContextCoder",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "ContextType" => {
              "beforeExport": "",
              "code": "Context",
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "User" => {
        "isDefault": false,
        "isType": true,
        "name": "User",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
          },
          "exports": Map {
            "User" => {
              "beforeExport": "",
              "code": "{"id"?: number,"username"?: string,"firstName"?: string,"lastName"?: string,"email"?: string,"password"?: string,"phone"?: string,"userStatus"?: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/createWithList.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1user~1createWithList/post@[object Object]:false" => "POST",
      "OperationTypeCoder@./petstore.yaml#/paths/~1user~1createWithList/post@path-types/user/createWithList.types.ts:true:false" => "HTTP_POST",
    },
    "exports": Map {
      "POST" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1user~1createWithList/post",
        "isDefault": false,
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_POST" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1user~1createWithList/post@[object Object]:true" => "HTTP_POST",
            "ContextTypeCoder@paths/user/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
          },
          "exports": Map {
            "HTTP_POST" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: Array<User>, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  User
         },
"application/json": { 
            schema:  User
         }
};
        },
[statusCode in Exclude<HttpStatusCode, 200>]: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: User
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: User
            } | {  
          status: number | undefined 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1createWithList/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
            "HttpStatusCode" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/user/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => {
              "isDefault": false,
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                },
                "exports": Map {
                  "User" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"username"?: string,"firstName"?: string,"lastName"?: string,"email"?: string,"password"?: string,"phone"?: string,"userStatus"?: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/createWithList.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user/createWithList.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user/createWithList.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1user~1createWithList/post@[object Object]:true" => "HTTP_POST",
      "ContextTypeCoder@paths/user/$.context.ts:true:false" => "ContextType",
      "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
    },
    "exports": Map {
      "HTTP_POST" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: Array<User>, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  User
         },
"application/json": { 
            schema:  User
         }
};
        },
[statusCode in Exclude<HttpStatusCode, 200>]: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: User
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: User
            } | {  
          status: number | undefined 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1createWithList/post",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../../types.d.ts",
      },
      "HttpStatusCode" => {
        "isType": true,
        "modulePath": "../../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "ContextType" => {
              "beforeExport": "",
              "code": {
                "raw": "export type { ContextType } from "../$.context"",
              },
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/user/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "User" => {
        "isDefault": false,
        "isType": true,
        "name": "User",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
          },
          "exports": Map {
            "User" => {
              "beforeExport": "",
              "code": "{"id"?: number,"username"?: string,"firstName"?: string,"lastName"?: string,"email"?: string,"password"?: string,"phone"?: string,"userStatus"?: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user/createWithList.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/login.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1user~1login/get@[object Object]:false" => "GET",
      "OperationTypeCoder@./petstore.yaml#/paths/~1user~1login/get@path-types/user/login.types.ts:true:false" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1user~1login/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_GET" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1user~1login/get@[object Object]:true" => "HTTP_GET",
            "ContextTypeCoder@paths/user/$.context.ts:true:false" => "ContextType",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: {"username?": string, "password?": string}, path: never, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {
"X-Rate-Limit": { schema: number},
"X-Expires-After": { schema: string}
};
          content: {
"application/xml": { 
            schema:  string
         },
"application/json": { 
            schema:  string
         }
};
        },
400: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: string
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: string
            } | {  
          status: 400 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1login/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/user/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/login.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user/login.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user/login.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1user~1login/get@[object Object]:true" => "HTTP_GET",
      "ContextTypeCoder@paths/user/$.context.ts:true:false" => "ContextType",
    },
    "exports": Map {
      "HTTP_GET" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: {"username?": string, "password?": string}, path: never, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {
"X-Rate-Limit": { schema: number},
"X-Expires-After": { schema: string}
};
          content: {
"application/xml": { 
            schema:  string
         },
"application/json": { 
            schema:  string
         }
};
        },
400: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: string
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: string
            } | {  
          status: 400 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1login/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "ContextType" => {
              "beforeExport": "",
              "code": {
                "raw": "export type { ContextType } from "../$.context"",
              },
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/user/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user/login.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/logout.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1user~1logout/get@[object Object]:false" => "GET",
      "OperationTypeCoder@./petstore.yaml#/paths/~1user~1logout/get@path-types/user/logout.types.ts:true:false" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => {
        "beforeExport": "",
        "code": "() => { /* no response content specified in the OpenAPI document */ }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1user~1logout/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_GET" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1user~1logout/get@[object Object]:true" => "HTTP_GET",
            "ContextTypeCoder@paths/user/$.context.ts:true:false" => "ContextType",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
[statusCode in HttpStatusCode]: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: number | undefined 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1logout/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
            "HttpStatusCode" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/user/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/logout.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user/logout.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user/logout.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1user~1logout/get@[object Object]:true" => "HTTP_GET",
      "ContextTypeCoder@paths/user/$.context.ts:true:false" => "ContextType",
    },
    "exports": Map {
      "HTTP_GET" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: never, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
[statusCode in HttpStatusCode]: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: number | undefined 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1logout/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../../types.d.ts",
      },
      "HttpStatusCode" => {
        "isType": true,
        "modulePath": "../../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "ContextType" => {
              "beforeExport": "",
              "code": {
                "raw": "export type { ContextType } from "../$.context"",
              },
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/user/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user/logout.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/{username}.ts" => Script {
    "cache": Map {
      "OperationCoder@./petstore.yaml#/paths/~1user~1{username}/get@[object Object]:false" => "GET",
      "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/get@path-types/user/{username}.types.ts:true:false" => "HTTP_GET",
      "OperationCoder@./petstore.yaml#/paths/~1user~1{username}/put@[object Object]:false" => "PUT",
      "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/put@path-types/user/{username}.types.ts:true:false" => "HTTP_PUT",
      "OperationCoder@./petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:false" => "DELETE",
      "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/delete@path-types/user/{username}.types.ts:true:false" => "HTTP_DELETE",
    },
    "exports": Map {
      "GET" => {
        "beforeExport": "",
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1user~1{username}/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
      "PUT" => {
        "beforeExport": "",
        "code": "() => { /* no response content specified in the OpenAPI document */ }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1user~1{username}/put",
        "isDefault": false,
        "isType": false,
        "name": "PUT",
        "promise": Promise {},
        "typeDeclaration": "HTTP_PUT",
      },
      "DELETE" => {
        "beforeExport": "",
        "code": "() => { /* no response content specified in the OpenAPI document */ }",
        "done": true,
        "id": "OperationCoder@./petstore.yaml#/paths/~1user~1{username}/delete",
        "isDefault": false,
        "isType": false,
        "name": "DELETE",
        "promise": Promise {},
        "typeDeclaration": "HTTP_DELETE",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "HTTP_GET" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/put@[object Object]:true" => "HTTP_PUT",
            "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextTypeCoder@paths/user/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"username": string}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  User
         },
"application/json": { 
            schema:  User
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: User
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: User
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"username": string}, header: never, body: User, context: ContextType, response: ResponseBuilderFactory<{
[statusCode in HttpStatusCode]: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: number | undefined 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/put",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"username": string}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
            "HttpStatusCode" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/user/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => {
              "isDefault": false,
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                },
                "exports": Map {
                  "User" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"username"?: string,"firstName"?: string,"lastName"?: string,"email"?: string,"password"?: string,"phone"?: string,"userStatus"?: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/{username}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_PUT" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_PUT",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/put@[object Object]:true" => "HTTP_PUT",
            "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextTypeCoder@paths/user/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"username": string}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  User
         },
"application/json": { 
            schema:  User
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: User
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: User
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"username": string}, header: never, body: User, context: ContextType, response: ResponseBuilderFactory<{
[statusCode in HttpStatusCode]: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: number | undefined 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/put",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"username": string}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
            "HttpStatusCode" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/user/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => {
              "isDefault": false,
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                },
                "exports": Map {
                  "User" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"username"?: string,"firstName"?: string,"lastName"?: string,"email"?: string,"password"?: string,"phone"?: string,"userStatus"?: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/{username}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_DELETE" => {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_DELETE",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/put@[object Object]:true" => "HTTP_PUT",
            "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextTypeCoder@paths/user/$.context.ts:true:false" => "ContextType",
            "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
          },
          "exports": Map {
            "HTTP_GET" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"username": string}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  User
         },
"application/json": { 
            schema:  User
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: User
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: User
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"username": string}, header: never, body: User, context: ContextType, response: ResponseBuilderFactory<{
[statusCode in HttpStatusCode]: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: number | undefined 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/put",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => {
              "beforeExport": "",
              "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"username": string}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
              "done": true,
              "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {
            "ResponseBuilderFactory" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
            "HttpStatusCode" => {
              "isType": true,
              "modulePath": "../../types.d.ts",
            },
          },
          "imports": Map {
            "ContextType" => {
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "script": Script {
                "cache": Map {
                  "ContextTypeCoder@[object Object]:true" => "ContextType",
                },
                "exports": Map {
                  "ContextType" => {
                    "beforeExport": "",
                    "code": {
                      "raw": "export type { ContextType } from "../$.context"",
                    },
                    "done": true,
                    "id": "ContextTypeCoder",
                    "isDefault": false,
                    "isType": true,
                    "name": "ContextType",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "paths/user/$.context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => {
              "isDefault": false,
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                },
                "exports": Map {
                  "User" => {
                    "beforeExport": "",
                    "code": "{"id"?: number,"username"?: string,"firstName"?: string,"lastName"?: string,"email"?: string,"password"?: string,"phone"?: string,"userStatus"?: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImport": Map {},
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/{username}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user/{username}.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user/{username}.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/get@[object Object]:true" => "HTTP_GET",
      "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/put@[object Object]:true" => "HTTP_PUT",
      "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:true" => "HTTP_DELETE",
      "ContextTypeCoder@paths/user/$.context.ts:true:false" => "ContextType",
      "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
    },
    "exports": Map {
      "HTTP_GET" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"username": string}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
200: {
          headers: {};
          content: {
"application/xml": { 
            schema:  User
         },
"application/json": { 
            schema:  User
         }
};
        },
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
              status: 200, 
              contentType?: "application/xml",
              body?: User
            } | {  
              status: 200, 
              contentType?: "application/json",
              body?: User
            } | {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_PUT" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"username": string}, header: never, body: User, context: ContextType, response: ResponseBuilderFactory<{
[statusCode in HttpStatusCode]: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: number | undefined 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/put",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_PUT",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_DELETE" => {
        "beforeExport": "",
        "code": "({ query, path, header, body, context, proxy }: { query: never, path: {"username": string}, header: never, body: undefined, context: ContextType, response: ResponseBuilderFactory<{
400: {
          headers: {};
          content: {};
        },
404: {
          headers: {};
          content: {};
        }
}>, proxy: (url: string) => { proxyUrl: string } }) => {  
          status: 400 
        } | {  
          status: 404 
        } | { status: 415, contentType: "text/plain", body: string } | void",
        "done": true,
        "id": "OperationTypeCoder@./petstore.yaml#/paths/~1user~1{username}/delete",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_DELETE",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {
      "ResponseBuilderFactory" => {
        "isType": true,
        "modulePath": "../../types.d.ts",
      },
      "HttpStatusCode" => {
        "isType": true,
        "modulePath": "../../types.d.ts",
      },
    },
    "imports": Map {
      "ContextType" => {
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "script": Script {
          "cache": Map {
            "ContextTypeCoder@[object Object]:true" => "ContextType",
          },
          "exports": Map {
            "ContextType" => {
              "beforeExport": "",
              "code": {
                "raw": "export type { ContextType } from "../$.context"",
              },
              "done": true,
              "id": "ContextTypeCoder",
              "isDefault": false,
              "isType": true,
              "name": "ContextType",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "paths/user/$.context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "User" => {
        "isDefault": false,
        "isType": true,
        "name": "User",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
          },
          "exports": Map {
            "User" => {
              "beforeExport": "",
              "code": "{"id"?: number,"username"?: string,"firstName"?: string,"lastName"?: string,"email"?: string,"password"?: string,"phone"?: string,"userStatus"?: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user/{username}.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/$.context.ts" => Script {
    "cache": Map {
      "default" => "Context",
      "ContextTypeCoder@[object Object]:true" => "ContextType",
    },
    "exports": Map {
      "Context" => {
        "beforeExport": "/**
* This is the default context for Counterfact.
* Change the code to suit your needs.
*/
class Context {
  // delete this line to make the class type safe
  [key: string]: any; 

  // A helper when you accessing the context object via the REPL. You can delete it if you like.
  [Symbol.for('nodejs.util.inspect.custom')](depth, options, inspect) {
    return inspect(this, { ...options, customInspect: false }) + "\\n\\n ^ This is the default context object. You can edit its definition at paths/$.context.ts";
  }
}
",
        "code": "new Context()",
        "done": true,
        "id": "ContextCoder",
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "ContextType" => {
        "beforeExport": "",
        "code": "Context",
        "done": true,
        "id": "ContextTypeCoder",
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {},
    "imports": Map {},
    "path": "paths/$.context.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/Pet.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
      "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
      "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
    },
    "exports": Map {
      "Pet" => {
        "beforeExport": "",
        "code": "{"id"?: number,"name": string,"category"?: Category,"photoUrls": Array<string>,"tags"?: Array<Tag>,"status"?: "available" | "pending" | "sold"}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isDefault": false,
        "isType": true,
        "name": "Pet",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {},
    "imports": Map {
      "Category" => {
        "isDefault": false,
        "isType": true,
        "name": "Category",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
          },
          "exports": Map {
            "Category" => {
              "beforeExport": "",
              "code": "{"id"?: number,"name"?: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Category",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "components/Category.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Tag" => {
        "isDefault": false,
        "isType": true,
        "name": "Tag",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
          },
          "exports": Map {
            "Tag" => {
              "beforeExport": "",
              "code": "{"id"?: number,"name"?: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Tag",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImport": Map {},
          "imports": Map {},
          "path": "components/Tag.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "components/Pet.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/$.context.ts" => Script {
    "cache": Map {
      "ContextTypeCoder@[object Object]:true" => "ContextType",
    },
    "exports": Map {
      "ContextType" => {
        "beforeExport": "",
        "code": {
          "raw": "export type { ContextType } from "../$.context"",
        },
        "done": true,
        "id": "ContextTypeCoder",
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {},
    "imports": Map {},
    "path": "paths/pet/$.context.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/{petId}/$.context.ts" => Script {
    "cache": Map {
      "ContextTypeCoder@[object Object]:true" => "ContextType",
    },
    "exports": Map {
      "ContextType" => {
        "beforeExport": "",
        "code": {
          "raw": "export type { ContextType } from "../$.context"",
        },
        "done": true,
        "id": "ContextTypeCoder",
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {},
    "imports": Map {},
    "path": "paths/pet/{petId}/$.context.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/ApiResponse.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "ApiResponse",
    },
    "exports": Map {
      "ApiResponse" => {
        "beforeExport": "",
        "code": "{"code"?: number,"type"?: string,"message"?: string}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isDefault": false,
        "isType": true,
        "name": "ApiResponse",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {},
    "imports": Map {},
    "path": "components/ApiResponse.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/$.context.ts" => Script {
    "cache": Map {
      "ContextTypeCoder@[object Object]:true" => "ContextType",
    },
    "exports": Map {
      "ContextType" => {
        "beforeExport": "",
        "code": {
          "raw": "export type { ContextType } from "../$.context"",
        },
        "done": true,
        "id": "ContextTypeCoder",
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {},
    "imports": Map {},
    "path": "paths/store/$.context.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/Order.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
    },
    "exports": Map {
      "Order" => {
        "beforeExport": "",
        "code": "{"id"?: number,"petId"?: number,"quantity"?: number,"shipDate"?: string,"status"?: "placed" | "approved" | "delivered","complete"?: boolean}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isDefault": false,
        "isType": true,
        "name": "Order",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {},
    "imports": Map {},
    "path": "components/Order.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/order/$.context.ts" => Script {
    "cache": Map {
      "ContextTypeCoder@[object Object]:true" => "ContextType",
    },
    "exports": Map {
      "ContextType" => {
        "beforeExport": "",
        "code": {
          "raw": "export type { ContextType } from "../$.context"",
        },
        "done": true,
        "id": "ContextTypeCoder",
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {},
    "imports": Map {},
    "path": "paths/store/order/$.context.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/User.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "User",
    },
    "exports": Map {
      "User" => {
        "beforeExport": "",
        "code": "{"id"?: number,"username"?: string,"firstName"?: string,"lastName"?: string,"email"?: string,"password"?: string,"phone"?: string,"userStatus"?: number}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isDefault": false,
        "isType": true,
        "name": "User",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {},
    "imports": Map {},
    "path": "components/User.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/$.context.ts" => Script {
    "cache": Map {
      "ContextTypeCoder@[object Object]:true" => "ContextType",
    },
    "exports": Map {
      "ContextType" => {
        "beforeExport": "",
        "code": {
          "raw": "export type { ContextType } from "../$.context"",
        },
        "done": true,
        "id": "ContextTypeCoder",
        "isDefault": false,
        "isType": true,
        "name": "ContextType",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {},
    "imports": Map {},
    "path": "paths/user/$.context.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/Category.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
    },
    "exports": Map {
      "Category" => {
        "beforeExport": "",
        "code": "{"id"?: number,"name"?: string}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isDefault": false,
        "isType": true,
        "name": "Category",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {},
    "imports": Map {},
    "path": "components/Category.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/Tag.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
    },
    "exports": Map {
      "Tag" => {
        "beforeExport": "",
        "code": "{"id"?: number,"name"?: string}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isDefault": false,
        "isType": true,
        "name": "Tag",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImport": Map {},
    "imports": Map {},
    "path": "components/Tag.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
}
`;

exports[`end-to-end test generates the same code for pet store that it did on the last test run 2`] = `
".cache
"
`;

exports[`end-to-end test generates the same code for pet store that it did on the last test run 3`] = `
"This directory contains compiled JS files from the paths directory. Do not edit these files directly.
"
`;
